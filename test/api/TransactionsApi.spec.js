/**
 * Accounting API
 *
 * The version of the OpenAPI document: VERSION_HERE
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import MockAdapter from "axios-mock-adapter";
import axios from "axios";
import { Accounting } from "../../src/index.js";

let mock = new MockAdapter(axios);

describe("TransactionsApi", function () {
  describe("addTransaction", function () {
    it("should call addTransaction successfully", function (done) {
      let path = "/transactions";

      mock.onAny(path).reply(200, {});
      let accounting = new Accounting(
        "fake-token",
        "https://fake-endpoint.accounting.sh",
      );
      accounting.transactions
        .addTransaction({})
        .then(() => {
          done();
        })
        .catch(() => {
          done(false);
        });
    });
  });
  describe("addTransactionCode", function () {
    it("should call addTransactionCode successfully", function (done) {
      let path = "/transactions/{uuid}/codes";
      path = path.replace("{" + "uuid" + "}", "uuid_example");

      mock.onAny(path).reply(200, {});
      let accounting = new Accounting(
        "fake-token",
        "https://fake-endpoint.accounting.sh",
      );
      accounting.transactions
        .addTransactionCode("uuid_example", {})
        .then(() => {
          done();
        })
        .catch(() => {
          done(false);
        });
    });
  });
  describe("deleteTransaction", function () {
    it("should call deleteTransaction successfully", function (done) {
      let path = "/transactions/{uuid}";
      path = path.replace("{" + "uuid" + "}", "uuid_example");

      mock.onAny(path).reply(200, {});
      let accounting = new Accounting(
        "fake-token",
        "https://fake-endpoint.accounting.sh",
      );
      accounting.transactions
        .deleteTransaction("uuid_example")
        .then(() => {
          done();
        })
        .catch(() => {
          done(false);
        });
    });
  });
  describe("deleteTransactionCode", function () {
    it("should call deleteTransactionCode successfully", function (done) {
      let path = "/transactions/{uuid}/codes/{code}";
      path = path.replace("{" + "uuid" + "}", "uuid_example");
      path = path.replace("{" + "code" + "}", "code_example");

      mock.onAny(path).reply(200, {});
      let accounting = new Accounting(
        "fake-token",
        "https://fake-endpoint.accounting.sh",
      );
      accounting.transactions
        .deleteTransactionCode("uuid_example", "code_example")
        .then(() => {
          done();
        })
        .catch(() => {
          done(false);
        });
    });
  });
  describe("getTransaction", function () {
    it("should call getTransaction successfully", function (done) {
      let path = "/transactions/{uuid}";
      path = path.replace("{" + "uuid" + "}", "uuid_example");

      mock.onAny(path).reply(200, {});
      let accounting = new Accounting(
        "fake-token",
        "https://fake-endpoint.accounting.sh",
      );
      accounting.transactions
        .getTransaction("uuid_example")
        .then(() => {
          done();
        })
        .catch(() => {
          done(false);
        });
    });
  });
  describe("importTransactions", function () {
    it("should call importTransactions successfully", function (done) {
      let path = "/transactions/import";

      mock.onAny(path).reply(200, {});
      let accounting = new Accounting(
        "fake-token",
        "https://fake-endpoint.accounting.sh",
      );
      accounting.transactions
        .importTransactions({})
        .then(() => {
          done();
        })
        .catch(() => {
          done(false);
        });
    });
  });
  describe("listTransactionCodes", function () {
    it("should call listTransactionCodes successfully", function (done) {
      let path = "/transactions/{uuid}/codes";
      path = path.replace("{" + "uuid" + "}", "uuid_example");

      mock.onAny(path).reply(200, {});
      let accounting = new Accounting(
        "fake-token",
        "https://fake-endpoint.accounting.sh",
      );
      accounting.transactions
        .listTransactionCodes(
          "uuid_example",
          "fields_example",
          "page_example",
          "perPage_example",
          "account_example",
        )
        .then(() => {
          done();
        })
        .catch(() => {
          done(false);
        });
    });
  });
  describe("listTransactions", function () {
    it("should call listTransactions successfully", function (done) {
      let path = "/transactions";

      mock.onAny(path).reply(200, {});
      let accounting = new Accounting(
        "fake-token",
        "https://fake-endpoint.accounting.sh",
      );
      accounting.transactions
        .listTransactions(
          "fields_example",
          "page_example",
          "perPage_example",
          "account_example",
        )
        .then(() => {
          done();
        })
        .catch(() => {
          done(false);
        });
    });
  });
  describe("updateTransaction", function () {
    it("should call updateTransaction successfully", function (done) {
      let path = "/transactions/{uuid}";
      path = path.replace("{" + "uuid" + "}", "uuid_example");

      mock.onAny(path).reply(200, {});
      let accounting = new Accounting(
        "fake-token",
        "https://fake-endpoint.accounting.sh",
      );
      accounting.transactions
        .updateTransaction("uuid_example", {})
        .then(() => {
          done();
        })
        .catch(() => {
          done(false);
        });
    });
  });
  describe("updateTransactionCode", function () {
    it("should call updateTransactionCode successfully", function (done) {
      let path = "/transactions/{uuid}/codes";
      path = path.replace("{" + "uuid" + "}", "uuid_example");

      mock.onAny(path).reply(200, {});
      let accounting = new Accounting(
        "fake-token",
        "https://fake-endpoint.accounting.sh",
      );
      accounting.transactions
        .updateTransactionCode("uuid_example", {})
        .then(() => {
          done();
        })
        .catch(() => {
          done(false);
        });
    });
  });
});

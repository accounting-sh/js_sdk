/**
 * Accounting API
 *
 * The version of the OpenAPI document: 8.3.5
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import MockAdapter from "axios-mock-adapter";
import axios from "axios";
import { Accounting } from "../../src/index.js";

let mock = new MockAdapter(axios);

describe("UsersApi", function () {
  describe("addUser", function () {
    it("should call addUser successfully", function (done) {
      let path = "/users";

      mock.onAny(path).reply(200, {});
      let accounting = new Accounting(
        "fake-token",
        "https://fake-endpoint.accounting.sh",
      );
      accounting.users
        .addUser({})
        .then(() => {
          done();
        })
        .catch(() => {
          done(false);
        });
    });
  });
  describe("deleteUser", function () {
    it("should call deleteUser successfully", function (done) {
      let path = "/users/{uuid}";
      path = path.replace("{" + "uuid" + "}", "uuid_example");

      mock.onAny(path).reply(200, {});
      let accounting = new Accounting(
        "fake-token",
        "https://fake-endpoint.accounting.sh",
      );
      accounting.users
        .deleteUser("uuid_example")
        .then(() => {
          done();
        })
        .catch(() => {
          done(false);
        });
    });
  });
  describe("getUser", function () {
    it("should call getUser successfully", function (done) {
      let path = "/users/{uuid}";
      path = path.replace("{" + "uuid" + "}", "uuid_example");

      mock.onAny(path).reply(200, {});
      let accounting = new Accounting(
        "fake-token",
        "https://fake-endpoint.accounting.sh",
      );
      accounting.users
        .getUser("uuid_example")
        .then(() => {
          done();
        })
        .catch(() => {
          done(false);
        });
    });
  });
  describe("listUsers", function () {
    it("should call listUsers successfully", function (done) {
      let path = "/users";

      mock.onAny(path).reply(200, {});
      let accounting = new Accounting(
        "fake-token",
        "https://fake-endpoint.accounting.sh",
      );
      accounting.users
        .listUsers("fields_example", "page_example", "perPage_example")
        .then(() => {
          done();
        })
        .catch(() => {
          done(false);
        });
    });
  });
  describe("updateUser", function () {
    it("should call updateUser successfully", function (done) {
      let path = "/users/{uuid}";
      path = path.replace("{" + "uuid" + "}", "uuid_example");

      mock.onAny(path).reply(200, {});
      let accounting = new Accounting(
        "fake-token",
        "https://fake-endpoint.accounting.sh",
      );
      accounting.users
        .updateUser("uuid_example", {})
        .then(() => {
          done();
        })
        .catch(() => {
          done(false);
        });
    });
  });
  describe("usersCompanies", function () {
    it("should call usersCompanies successfully", function (done) {
      let path = "/users/me/companies";

      mock.onAny(path).reply(200, {});
      let accounting = new Accounting(
        "fake-token",
        "https://fake-endpoint.accounting.sh",
      );
      accounting.users
        .usersCompanies()
        .then(() => {
          done();
        })
        .catch(() => {
          done(false);
        });
    });
  });
  describe("usersMe", function () {
    it("should call usersMe successfully", function (done) {
      let path = "/users/me";

      mock.onAny(path).reply(200, {});
      let accounting = new Accounting(
        "fake-token",
        "https://fake-endpoint.accounting.sh",
      );
      accounting.users
        .usersMe()
        .then(() => {
          done();
        })
        .catch(() => {
          done(false);
        });
    });
  });
});

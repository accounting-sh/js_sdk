/**
 * Accounting API
 *
 * The version of the OpenAPI document: VERSION_HERE
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import MockAdapter from "axios-mock-adapter";
import axios from "axios";
import { Accounting } from "../../src/index.js";

let mock = new MockAdapter(axios);

describe("InvoicesApi", function () {
  describe("addInvoice", function () {
    it("should call addInvoice successfully", function (done) {
      let path = "/incomes/invoices";

      mock.onAny(path).reply(200, {});
      let accounting = new Accounting(
        "fake-token",
        "https://fake-endpoint.accounting.sh",
      );
      accounting.invoices
        .addInvoice({})
        .then(() => {
          done();
        })
        .catch(() => {
          done(false);
        });
    });
  });
  describe("addInvoicePayment", function () {
    it("should call addInvoicePayment successfully", function (done) {
      let path = "/incomes/invoices/{uuid}/payments";
      path = path.replace("{" + "uuid" + "}", "uuid_example");

      mock.onAny(path).reply(200, {});
      let accounting = new Accounting(
        "fake-token",
        "https://fake-endpoint.accounting.sh",
      );
      accounting.invoices
        .addInvoicePayment("uuid_example", {})
        .then(() => {
          done();
        })
        .catch(() => {
          done(false);
        });
    });
  });
  describe("deleteInvoice", function () {
    it("should call deleteInvoice successfully", function (done) {
      let path = "/incomes/invoices/{uuid}";
      path = path.replace("{" + "uuid" + "}", "uuid_example");

      mock.onAny(path).reply(200, {});
      let accounting = new Accounting(
        "fake-token",
        "https://fake-endpoint.accounting.sh",
      );
      accounting.invoices
        .deleteInvoice("uuid_example")
        .then(() => {
          done();
        })
        .catch(() => {
          done(false);
        });
    });
  });
  describe("getInvoice", function () {
    it("should call getInvoice successfully", function (done) {
      let path = "/incomes/invoices/{uuid}";
      path = path.replace("{" + "uuid" + "}", "uuid_example");

      mock.onAny(path).reply(200, {});
      let accounting = new Accounting(
        "fake-token",
        "https://fake-endpoint.accounting.sh",
      );
      accounting.invoices
        .getInvoice("uuid_example")
        .then(() => {
          done();
        })
        .catch(() => {
          done(false);
        });
    });
  });
  describe("getInvoiceDocument", function () {
    it("should call getInvoiceDocument successfully", function (done) {
      let path = "/incomes/invoices/{uuid}/document";
      path = path.replace("{" + "uuid" + "}", "uuid_example");

      mock.onAny(path).reply(200, {});
      let accounting = new Accounting(
        "fake-token",
        "https://fake-endpoint.accounting.sh",
      );
      accounting.invoices
        .getInvoiceDocument("uuid_example")
        .then(() => {
          done();
        })
        .catch(() => {
          done(false);
        });
    });
  });
  describe("listInvoices", function () {
    it("should call listInvoices successfully", function (done) {
      let path = "/incomes/invoices";

      mock.onAny(path).reply(200, {});
      let accounting = new Accounting(
        "fake-token",
        "https://fake-endpoint.accounting.sh",
      );
      accounting.invoices
        .listInvoices("fields_example", "page_example", "perPage_example")
        .then(() => {
          done();
        })
        .catch(() => {
          done(false);
        });
    });
  });
  describe("listUnpaidInvoices", function () {
    it("should call listUnpaidInvoices successfully", function (done) {
      let path = "/incomes/invoices/unpaid";

      mock.onAny(path).reply(200, {});
      let accounting = new Accounting(
        "fake-token",
        "https://fake-endpoint.accounting.sh",
      );
      accounting.invoices
        .listUnpaidInvoices()
        .then(() => {
          done();
        })
        .catch(() => {
          done(false);
        });
    });
  });
  describe("updateInvoice", function () {
    it("should call updateInvoice successfully", function (done) {
      let path = "/incomes/invoices/{uuid}";
      path = path.replace("{" + "uuid" + "}", "uuid_example");

      mock.onAny(path).reply(200, {});
      let accounting = new Accounting(
        "fake-token",
        "https://fake-endpoint.accounting.sh",
      );
      accounting.invoices
        .updateInvoice("uuid_example", {})
        .then(() => {
          done();
        })
        .catch(() => {
          done(false);
        });
    });
  });
  describe("updateInvoicePayment", function () {
    it("should call updateInvoicePayment successfully", function (done) {
      let path = "/incomes/invoices/{uuid}/payments/{payment}";
      path = path.replace("{" + "uuid" + "}", "uuid_example");
      path = path.replace("{" + "payment" + "}", "payment_example");

      mock.onAny(path).reply(200, {});
      let accounting = new Accounting(
        "fake-token",
        "https://fake-endpoint.accounting.sh",
      );
      accounting.invoices
        .updateInvoicePayment("uuid_example", "payment_example", {})
        .then(() => {
          done();
        })
        .catch(() => {
          done(false);
        });
    });
  });
});

/**
 * Accounting API
 *
 * The version of the OpenAPI document: VERSION_HERE
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import MockAdapter from "axios-mock-adapter";
import axios from "axios";
import { Accounting } from "../../src/index.js";

let mock = new MockAdapter(axios);

describe("OAuthConfigApi", function () {
  describe("addOAuthConfiguration", function () {
    it("should call addOAuthConfiguration successfully", function (done) {
      let path = "/oauth";

      mock.onAny(path).reply(200, {});
      let accounting = new Accounting(
        "fake-token",
        "https://fake-endpoint.accounting.sh",
      );
      accounting.oAuthConfig
        .addOAuthConfiguration({})
        .then(() => {
          done();
        })
        .catch(() => {
          done(false);
        });
    });
  });
  describe("deleteOAuthConfiguration", function () {
    it("should call deleteOAuthConfiguration successfully", function (done) {
      let path = "/oauth/{uuid}";
      path = path.replace("{" + "uuid" + "}", "uuid_example");

      mock.onAny(path).reply(200, {});
      let accounting = new Accounting(
        "fake-token",
        "https://fake-endpoint.accounting.sh",
      );
      accounting.oAuthConfig
        .deleteOAuthConfiguration("uuid_example")
        .then(() => {
          done();
        })
        .catch(() => {
          done(false);
        });
    });
  });
  describe("getOAuthConfiguration", function () {
    it("should call getOAuthConfiguration successfully", function (done) {
      let path = "/oauth/{uuid}";
      path = path.replace("{" + "uuid" + "}", "uuid_example");

      mock.onAny(path).reply(200, {});
      let accounting = new Accounting(
        "fake-token",
        "https://fake-endpoint.accounting.sh",
      );
      accounting.oAuthConfig
        .getOAuthConfiguration("uuid_example")
        .then(() => {
          done();
        })
        .catch(() => {
          done(false);
        });
    });
  });
  describe("listOAuthConfigurations", function () {
    it("should call listOAuthConfigurations successfully", function (done) {
      let path = "/oauth";

      mock.onAny(path).reply(200, {});
      let accounting = new Accounting(
        "fake-token",
        "https://fake-endpoint.accounting.sh",
      );
      accounting.oAuthConfig
        .listOAuthConfigurations(
          "fields_example",
          "page_example",
          "perPage_example",
        )
        .then(() => {
          done();
        })
        .catch(() => {
          done(false);
        });
    });
  });
  describe("listProviders", function () {
    it("should call listProviders successfully", function (done) {
      let path = "/oauth/providers";

      mock.onAny(path).reply(200, {});
      let accounting = new Accounting(
        "fake-token",
        "https://fake-endpoint.accounting.sh",
      );
      accounting.oAuthConfig
        .listProviders()
        .then(() => {
          done();
        })
        .catch(() => {
          done(false);
        });
    });
  });
  describe("updateOAuthConfiguration", function () {
    it("should call updateOAuthConfiguration successfully", function (done) {
      let path = "/oauth/{uuid}";
      path = path.replace("{" + "uuid" + "}", "uuid_example");

      mock.onAny(path).reply(200, {});
      let accounting = new Accounting(
        "fake-token",
        "https://fake-endpoint.accounting.sh",
      );
      accounting.oAuthConfig
        .updateOAuthConfiguration("uuid_example", {})
        .then(() => {
          done();
        })
        .catch(() => {
          done(false);
        });
    });
  });
});

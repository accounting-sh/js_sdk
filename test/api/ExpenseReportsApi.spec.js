/**
 * Accounting API
 *
 * The version of the OpenAPI document: VERSION_HERE
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import MockAdapter from "axios-mock-adapter";
import axios from "axios";
import { Accounting } from "../../src/index.js";

let mock = new MockAdapter(axios);

describe("ExpenseReportsApi", function () {
  describe("addExpenseReport", function () {
    it("should call addExpenseReport successfully", function (done) {
      let path = "/expenses/expense-reports";

      mock.onAny(path).reply(200, {});
      let accounting = new Accounting(
        "fake-token",
        "https://fake-endpoint.accounting.sh",
      );
      accounting.expenseReports
        .addExpenseReport({})
        .then(() => {
          done();
        })
        .catch(() => {
          done(false);
        });
    });
  });
  describe("deleteExpenseReport", function () {
    it("should call deleteExpenseReport successfully", function (done) {
      let path = "/expenses/expense-reports/{uuid}";
      path = path.replace("{" + "uuid" + "}", "uuid_example");

      mock.onAny(path).reply(200, {});
      let accounting = new Accounting(
        "fake-token",
        "https://fake-endpoint.accounting.sh",
      );
      accounting.expenseReports
        .deleteExpenseReport("uuid_example")
        .then(() => {
          done();
        })
        .catch(() => {
          done(false);
        });
    });
  });
  describe("expenseReportOAuthLogin", function () {
    it("should call expenseReportOAuthLogin successfully", function (done) {
      let path = "/expenses/expense-reports/login/{method}";
      path = path.replace("{" + "method" + "}", "method_example");

      mock.onAny(path).reply(200, {});
      let accounting = new Accounting(
        "fake-token",
        "https://fake-endpoint.accounting.sh",
      );
      accounting.expenseReports
        .expenseReportOAuthLogin("method_example")
        .then(() => {
          done();
        })
        .catch(() => {
          done(false);
        });
    });
  });
  describe("getExpenseReport", function () {
    it("should call getExpenseReport successfully", function (done) {
      let path = "/expenses/expense-reports/{uuid}";
      path = path.replace("{" + "uuid" + "}", "uuid_example");

      mock.onAny(path).reply(200, {});
      let accounting = new Accounting(
        "fake-token",
        "https://fake-endpoint.accounting.sh",
      );
      accounting.expenseReports
        .getExpenseReport("uuid_example")
        .then(() => {
          done();
        })
        .catch(() => {
          done(false);
        });
    });
  });
  describe("getExpenseReportAccount", function () {
    it("should call getExpenseReportAccount successfully", function (done) {
      let path = "/expenses/expense-reports/me";

      mock.onAny(path).reply(200, {});
      let accounting = new Accounting(
        "fake-token",
        "https://fake-endpoint.accounting.sh",
      );
      accounting.expenseReports
        .getExpenseReportAccount()
        .then(() => {
          done();
        })
        .catch(() => {
          done(false);
        });
    });
  });
  describe("getExpenseReportUser", function () {
    it("should call getExpenseReportUser successfully", function (done) {
      let path = "/expenses/expense-reports/users/{uuid}";
      path = path.replace("{" + "uuid" + "}", "uuid_example");

      mock.onAny(path).reply(200, {});
      let accounting = new Accounting(
        "fake-token",
        "https://fake-endpoint.accounting.sh",
      );
      accounting.expenseReports
        .getExpenseReportUser("uuid_example")
        .then(() => {
          done();
        })
        .catch(() => {
          done(false);
        });
    });
  });
  describe("listExpenseReports", function () {
    it("should call listExpenseReports successfully", function (done) {
      let path = "/expenses/expense-reports";

      mock.onAny(path).reply(200, {});
      let accounting = new Accounting(
        "fake-token",
        "https://fake-endpoint.accounting.sh",
      );
      accounting.expenseReports
        .listExpenseReports("fields_example", "page_example", "perPage_example")
        .then(() => {
          done();
        })
        .catch(() => {
          done(false);
        });
    });
  });
  describe("sendExpenseReportLoginEmail", function () {
    it("should call sendExpenseReportLoginEmail successfully", function (done) {
      let path = "/expenses/expense-reports/login";

      mock.onAny(path).reply(200, {});
      let accounting = new Accounting(
        "fake-token",
        "https://fake-endpoint.accounting.sh",
      );
      accounting.expenseReports
        .sendExpenseReportLoginEmail({})
        .then(() => {
          done();
        })
        .catch(() => {
          done(false);
        });
    });
  });
  describe("updateExpenseReport", function () {
    it("should call updateExpenseReport successfully", function (done) {
      let path = "/expenses/expense-reports/{uuid}";
      path = path.replace("{" + "uuid" + "}", "uuid_example");

      mock.onAny(path).reply(200, {});
      let accounting = new Accounting(
        "fake-token",
        "https://fake-endpoint.accounting.sh",
      );
      accounting.expenseReports
        .updateExpenseReport("uuid_example", {})
        .then(() => {
          done();
        })
        .catch(() => {
          done(false);
        });
    });
  });
  describe("updateExpenseReportAccount", function () {
    it("should call updateExpenseReportAccount successfully", function (done) {
      let path = "/expenses/expense-reports/me";

      mock.onAny(path).reply(200, {});
      let accounting = new Accounting(
        "fake-token",
        "https://fake-endpoint.accounting.sh",
      );
      accounting.expenseReports
        .updateExpenseReportAccount({})
        .then(() => {
          done();
        })
        .catch(() => {
          done(false);
        });
    });
  });
  describe("updateExpenseReportSettings", function () {
    it("should call updateExpenseReportSettings successfully", function (done) {
      let path = "/expenses/expense-reports/settings";

      mock.onAny(path).reply(200, {});
      let accounting = new Accounting(
        "fake-token",
        "https://fake-endpoint.accounting.sh",
      );
      accounting.expenseReports
        .updateExpenseReportSettings({})
        .then(() => {
          done();
        })
        .catch(() => {
          done(false);
        });
    });
  });
  describe("verifyExpenseReportSettings", function () {
    it("should call verifyExpenseReportSettings successfully", function (done) {
      let path = "/expenses/expense-reports/verify";

      mock.onAny(path).reply(200, {});
      let accounting = new Accounting(
        "fake-token",
        "https://fake-endpoint.accounting.sh",
      );
      accounting.expenseReports
        .verifyExpenseReportSettings({})
        .then(() => {
          done();
        })
        .catch(() => {
          done(false);
        });
    });
  });
});
